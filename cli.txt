Postgres:
docker exec -it projet-de-session-ocean_db_1 /bin/bash
psql inf5190 user
\dt
SELECT * FROM productorder;

Redis:
docker exec -it projet-de-session-ocean_cache_1 /bin/bash
redis-cli -h localhost -p 6379
OU
redis-cli -u redis://h:p8ede03809046ec5bd7fe3bf623fc0e076491f37d26140008c00bf94183a73fcb@ec2-18-214-19-152.compute-1.amazonaws.com:23929
INFO keyspace (list databases with keys created)
KEYS * (list all keys)


Restart containers:
docker container stop projet-de-session-ocean_db_1; docker container stop projet-de-session-ocean_cache_1; 
docker container prune; docker volume prune; docker-compose up -d

Start app:
FLASK_DEBUG=True FLASK_APP=inf5190 REDIS_URL=redis://localhost DB_HOST=localhost DB_USER=user DB_PASSWORD=pass DB_PORT=5432 DB_NAME=inf5190 flask init-db
docker build -t inf5190 .
docker run --name inf5190 -p 5000:5000 -e REDIS_URL=redis://localhost -e DB_HOST=localhost -e DB_USER=user -e DB_PASSWORD=pass -e DB_PORT=5432 -e DB_NAME=inf5190 inf5190

Run on Windows or MAC: (https://docs.docker.com/docker-for-mac/networking/)
docker run --name inf5190 -p 5000:5000 -e REDIS_URL=redis://localhost -e DB_HOST=host.docker.internal -e DB_USER=user -e DB_PASSWORD=pass -e DB_PORT=5432 -e DB_NAME=inf5190 inf5190

Run local app:
FLASK_DEBUG=True FLASK_APP=inf5190 REDIS_URL=redis://localhost DB_HOST=localhost DB_USER=user DB_PASSWORD=pass DB_PORT=5432 DB_NAME=inf5190 flask run


Other commands:
docker network ls
docker network create <network-name>
docker network inspect <network-name>
docker run --network <network-name> ... OR docker network connect <network-name> <container-name>


Heroku:
heroku run "FLASK_DEBUG=1 FLASK_APP=inf5190 flask init-db"
heroku run "FLASK_DEBUG=1 FLASK_APP=inf5190 flask worker"